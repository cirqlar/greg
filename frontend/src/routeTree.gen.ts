/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as IndexImport } from './routes/index'
import { Route as LayoutSourcesImport } from './routes/_layout.sources'
import { Route as LayoutRoadmapsImport } from './routes/_layout.roadmaps'
import { Route as LayoutActivityImport } from './routes/_layout.activity'
import { Route as LayoutRoadmapRoadmapidImport } from './routes/_layout.roadmap.$roadmap_id'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LayoutSourcesRoute = LayoutSourcesImport.update({
  id: '/sources',
  path: '/sources',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRoadmapsRoute = LayoutRoadmapsImport.update({
  id: '/roadmaps',
  path: '/roadmaps',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutActivityRoute = LayoutActivityImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutRoadmapRoadmapidRoute = LayoutRoadmapRoadmapidImport.update({
  id: '/roadmap/$roadmap_id',
  path: '/roadmap/$roadmap_id',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/activity': {
      id: '/_layout/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof LayoutActivityImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/roadmaps': {
      id: '/_layout/roadmaps'
      path: '/roadmaps'
      fullPath: '/roadmaps'
      preLoaderRoute: typeof LayoutRoadmapsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/sources': {
      id: '/_layout/sources'
      path: '/sources'
      fullPath: '/sources'
      preLoaderRoute: typeof LayoutSourcesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/roadmap/$roadmap_id': {
      id: '/_layout/roadmap/$roadmap_id'
      path: '/roadmap/$roadmap_id'
      fullPath: '/roadmap/$roadmap_id'
      preLoaderRoute: typeof LayoutRoadmapRoadmapidImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutActivityRoute: typeof LayoutActivityRoute
  LayoutRoadmapsRoute: typeof LayoutRoadmapsRoute
  LayoutSourcesRoute: typeof LayoutSourcesRoute
  LayoutRoadmapRoadmapidRoute: typeof LayoutRoadmapRoadmapidRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutActivityRoute: LayoutActivityRoute,
  LayoutRoadmapsRoute: LayoutRoadmapsRoute,
  LayoutSourcesRoute: LayoutSourcesRoute,
  LayoutRoadmapRoadmapidRoute: LayoutRoadmapRoadmapidRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/activity': typeof LayoutActivityRoute
  '/roadmaps': typeof LayoutRoadmapsRoute
  '/sources': typeof LayoutSourcesRoute
  '/roadmap/$roadmap_id': typeof LayoutRoadmapRoadmapidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof LayoutRouteWithChildren
  '/activity': typeof LayoutActivityRoute
  '/roadmaps': typeof LayoutRoadmapsRoute
  '/sources': typeof LayoutSourcesRoute
  '/roadmap/$roadmap_id': typeof LayoutRoadmapRoadmapidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/activity': typeof LayoutActivityRoute
  '/_layout/roadmaps': typeof LayoutRoadmapsRoute
  '/_layout/sources': typeof LayoutSourcesRoute
  '/_layout/roadmap/$roadmap_id': typeof LayoutRoadmapRoadmapidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/activity'
    | '/roadmaps'
    | '/sources'
    | '/roadmap/$roadmap_id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/activity' | '/roadmaps' | '/sources' | '/roadmap/$roadmap_id'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/activity'
    | '/_layout/roadmaps'
    | '/_layout/sources'
    | '/_layout/roadmap/$roadmap_id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/activity",
        "/_layout/roadmaps",
        "/_layout/sources",
        "/_layout/roadmap/$roadmap_id"
      ]
    },
    "/_layout/activity": {
      "filePath": "_layout.activity.tsx",
      "parent": "/_layout"
    },
    "/_layout/roadmaps": {
      "filePath": "_layout.roadmaps.tsx",
      "parent": "/_layout"
    },
    "/_layout/sources": {
      "filePath": "_layout.sources.tsx",
      "parent": "/_layout"
    },
    "/_layout/roadmap/$roadmap_id": {
      "filePath": "_layout.roadmap.$roadmap_id.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
